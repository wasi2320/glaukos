name: Download, Push, and Deploy IAR File

on:
  workflow_dispatch:
    inputs:
      integration_id:
        description: 'Integration ID'
        required: true
      integration_version:
        description: 'Integration Version'
        required: true

jobs:
  download_and_push:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Fetch all history for all branches and tags

    - name: Install jq
      run: sudo apt-get install -y jq

    - name: Acquire OAuth Token
      run: |
        RESPONSE=$(curl -X POST \
        'https://idcs-8ee74fa3a3744beda80d235994a9c0ce.identity.oraclecloud.com/oauth2/v1/token' \
        -H 'Content-Type: application/x-www-form-urlencoded' \
        -H "Authorization: Basic $(echo -n '73c49a545b504db4aa91f27356366231:a8799ec7-3c29-477f-9085-aa01eb691dee' | base64)" \
        -d 'grant_type=client_credentials&scope=https%3A%2F%2F27AB99603F0E412C82017D2BD66711A2.integration.ocp.oraclecloud.com%3A443urn%3Aopc%3Aresource%3Aconsumer%3A%3Aall')
        echo $RESPONSE


    - name: Download IAR File
      id: download_iar
      env:
        ACCESS_TOKEN: ${{ env.ACCESS_TOKEN }}
      run: |
        INTEGRATION_ID=${{ github.event.inputs.integration_id }}
        INTEGRATION_VERSION=${{ github.event.inputs.integration_version }}
        DOWNLOAD_URL="https://design.integration.us-ashburn-1.ocp.oraclecloud.com/ic/api/integration/v1/integrations/${INTEGRATION_ID}|${INTEGRATION_VERSION}/archive?includeRecordingFlag=false*&allowLockedProject=true*&integrationInstance=gosaas-oic-gosaas-ia"
        echo "Download URL: $DOWNLOAD_URL"

        curl -o "${INTEGRATION_ID}.iar" -H "Authorization: Bearer $ACCESS_TOKEN" "$DOWNLOAD_URL" || { echo "Download failed"; exit 1; }

        # List files for debugging
        ls -l
        echo "Downloaded IAR file:"
        ls -l "${INTEGRATION_ID}.iar"

    - name: Verify IAR File Download
      run: |
        INTEGRATION_ID=${{ github.event.inputs.integration_id }}
        if [ ! -f "${INTEGRATION_ID}.iar" ]; then
          echo "IAR file not found!"
          exit 1
        fi

    - name: Append Timestamp to IAR File
      run: |
        INTEGRATION_ID=${{ github.event.inputs.integration_id }}
        TARGET_DIR="path/to/store/in/repo"
        TIMESTAMP=$(date)
        echo "\n# Timestamp: $TIMESTAMP" >> "${INTEGRATION_ID}.iar"
        mv "${INTEGRATION_ID}.iar" $TARGET_DIR/
        echo "Moved and modified IAR file with timestamp to target directory:"
        ls -l $TARGET_DIR

    - name: Commit and Push IAR File
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        git config --global user.name 'github-actions'
        git config --global user.email 'github-actions@github.com'
        INTEGRATION_ID=${{ github.event.inputs.integration_id }}
        TARGET_DIR="path/to/store/in/repo"
        git add -f $TARGET_DIR/"${INTEGRATION_ID}.iar"
        git status
        git commit -m "Update ${INTEGRATION_ID}.iar file"
        git push

    - name: Delete Existing Tag if Present
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        INTEGRATION_ID=${{ github.event.inputs.integration_id }}
        INTEGRATION_VERSION=${{ github.event.inputs.integration_version }}
        TAG_NAME="${INTEGRATION_ID}-${INTEGRATION_VERSION}"
        if git rev-parse $TAG_NAME >/dev/null 2>&1; then
          git tag -d $TAG_NAME
          git push origin :refs/tags/$TAG_NAME
        fi

    - name: Create and Push Tag
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        INTEGRATION_ID=${{ github.event.inputs.integration_id }}
        INTEGRATION_VERSION=${{ github.event.inputs.integration_version }}
        TAG_NAME="${INTEGRATION_ID}-${INTEGRATION_VERSION}"
        git tag $TAG_NAME
        git push origin $TAG_NAME
