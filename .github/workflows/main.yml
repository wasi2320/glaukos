name: Download, Push, and Deploy IAR File

on:
  workflow_dispatch:
    inputs:
      integration_id:
        description: 'Integration ID'
        required: true
      integration_version:
        description: 'Integration Version'
        required: true

jobs:
  download_and_push:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Fetch all history for all branches and tags

    - name: Install jq
      run: sudo apt-get install -y jq

    - name: Download IAR File
      id: download_iar
      env:
        ACCESS_TOKEN: ${{ secrets.TOKEN }}
      run: |
        INTEGRATION_ID=${{ github.event.inputs.integration_id }}
        INTEGRATION_VERSION=${{ github.event.inputs.integration_version }}
        DOWNLOAD_URL="https://design.integration.us-ashburn-1.ocp.oraclecloud.com/ic/api/integration/v1/integrations/${INTEGRATION_ID}|${INTEGRATION_VERSION}?integrationInstance=gosaas-oic-gosaas-ia"
        echo "Download URL: $DOWNLOAD_URL"

        curl -o "${INTEGRATION_ID}.iar" -H "Authorization: Bearer $ACCESS_TOKEN" "$DOWNLOAD_URL" || { echo "Download failed"; exit 1; }

        # List files for debugging
        ls -l
        echo "Downloaded IAR file:"
        ls -l "${INTEGRATION_ID}.iar"

    - name: Verify IAR File Download
      run: |
        INTEGRATION_ID=${{ github.event.inputs.integration_id }}
        if [ ! -f "${INTEGRATION_ID}.iar" ]; then
          echo "IAR file not found!"
          exit 1
        fi

    - name: Append Timestamp to IAR File
      run: |
        INTEGRATION_ID=${{ github.event.inputs.integration_id }}
        TARGET_DIR="path/to/store/in/repo"
        TIMESTAMP=$(date)
        echo "\n# Timestamp: $TIMESTAMP" >> "${INTEGRATION_ID}.iar"
        mv "${INTEGRATION_ID}.iar" $TARGET_DIR/
        echo "Moved and modified IAR file with timestamp to target directory:"
        ls -l $TARGET_DIR

    - name: Commit and Push IAR File
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        git config --global user.name 'github-actions'
        git config --global user.email 'github-actions@github.com'
        INTEGRATION_ID=${{ github.event.inputs.integration_id }}
        TARGET_DIR="path/to/store/in/repo"
        git add -f $TARGET_DIR/"${INTEGRATION_ID}.iar"
        git status
        git commit -m "Update ${INTEGRATION_ID}.iar file"
        git push

    - name: Delete Existing Tag if Present
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        INTEGRATION_ID=${{ github.event.inputs.integration_id }}
        INTEGRATION_VERSION=${{ github.event.inputs.integration_version }}
        TAG_NAME="${INTEGRATION_ID}-${INTEGRATION_VERSION}"
        if git rev-parse $TAG_NAME >/dev/null 2>&1; then
          git tag -d $TAG_NAME
          git push origin :refs/tags/$TAG_NAME
        fi

    - name: Create and Push Tag
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        INTEGRATION_ID=${{ github.event.inputs.integration_id }}
        INTEGRATION_VERSION=${{ github.event.inputs.integration_version }}
        TAG_NAME="${INTEGRATION_ID}-${INTEGRATION_VERSION}"
        git tag $TAG_NAME
        git push origin $TAG_NAME

  deploy_to_new_server:
    needs: download_and_push
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Deploy to New Integration Server
      env:
        ACCESS_TOKEN: ${{ secrets.NEW_SERVER_TOKEN }}
      run: |
        INTEGRATION_ID=${{ github.event.inputs.integration_id }}
        INTEGRATION_VERSION=${{ github.event.inputs.integration_version }}
        TARGET_DIR="path/to/store/in/repo"
        IAR_FILE="${TARGET_DIR}/${INTEGRATION_ID}.iar"
        UPLOAD_URL="https://design.integration.us-ashburn-1.ocp.oraclecloud.com/ic/api/integration/v1/integrations/archive?integrationInstance=gosaas-oic-dev-tbt-gosaas-ia"
        
        echo "Deploying IAR file to new server..."
        echo "Using Integration ID: $INTEGRATION_ID"
        echo "Using Integration Version: $INTEGRATION_VERSION"
        echo "Using Upload URL: $UPLOAD_URL"
        
        # Send the request using the provided curl command
        DEPLOY_RESPONSE=$(curl -X POST -H "Authorization: Bearer $ACCESS_TOKEN" -H "Accept:application/json" -F 'projectName=Test' -F "file=@${IAR_FILE}" -F 'type=application/octet-stream' "$UPLOAD_URL" 2>&1)
        
        echo "Deploy response: $DEPLOY_RESPONSE"
        
        if echo "$DEPLOY_RESPONSE" | grep -q "HTTP 412 Precondition Failed"; then
          echo "Error: No Projects for imports. Ensure the target environment is correctly set up to receive the import."
          exit 1
        elif echo "$DEPLOY_RESPONSE" | grep -q "HTTP 404 Not Found"; then
          echo "Error: Integration not found. Verify the integration ID and version."
          exit 1
        elif echo "$DEPLOY_RESPONSE" | grep -q "HTTP 401 Unauthorized"; then
          echo "Error: Unauthorized. Check the authentication token."
          exit 1
        elif echo "$DEPLOY_RESPONSE" | grep -q "HTTP 400 Bad Request"; then
          echo "Error: Bad request. Verify the request parameters."
          exit 1
        elif echo "$DEPLOY_RESPONSE" | grep -q "HTTP 200 OK"; then
          echo "Deployment successful!"
        else
          echo "Deployment failed with unexpected response: $DEPLOY_RESPONSE"
          exit 1
        fi
